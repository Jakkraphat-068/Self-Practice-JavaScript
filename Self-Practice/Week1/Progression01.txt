Self-Pactice-01 เป็นการเรียนเกี่ยวกับ array เป็นหลัก 
array สามารถเก็บหลาย item และเก็บได้หลาย data type โดย item จะถูกล้อมรอบด้วย '[ ]'(เป็นจุดสังเกตของ array)
1.การสร้าง array ทำได้หลายแบบ จะสร้างพร้อมกับ Item อยู่ข้างในแบบ array arr0 ได้ หรือจะสร้างเป็นแค่ Array ว่างๆ แบบ array car ก็ได้โดยที่ทั้งสองแบบ
 สามารถที่จะเพิ่มหรือลด item ได้ตามปกติ การสร้างอีกแบบคือแบบ b1 เป็นการสร้างแบบมี empty อยู่ภายในเป็นเหมือนการจองที่ให้ ดังนั้น empty item แต่ล่ะอันก็มี index
 เป็นของตัวเองไม่เหมือนกับแบบ array car



2.ใน javascript แท้จริงแล้ว array ก็คือ object พิสูจน์โดยการ log typeof ตัว array output จะได้ object  ดังนั้นถึง arr0 กับ arr1 มีค่าเหมือนกัน 
 แต่เปรียบเทียบกันแล้ว false เพราะ array เป็น reference type ถ้าสร้างใหม่จะได้ address ใหม่ เว้นแต่ถ้าเราเขียนให้ arr0 = arr1 จะเป็น true เพราะ
 มันเป็นการทำให้ทั้งสองตัวชี้ไป address เดียวกัน 



3. '...' ใน  array นั้นมีสองแบบ 
 แบบแรกคือ Spread คือกระจายข้อมูลจากใน array ออกมา เหมือนในตัวอย่างที่  ...ar2 กระจาย item ออกมาและทั้งสองตัวก็แยกเป็น item อยู่ใน con1 โดยที่ item แต่ล่ะตัวมี index ของมัน 
 และไม่ได้รวมกันเป็น item เดียวแบบ ar1 
 แบบสองคือ The rest คือการเก็บข้อมูลที่เหลือเข้าไว้ใน array เหมือน ar4 ที่ตัวแปล b เก็บค่าข้อมูลที่เหลือทั้งหมดเป็น array

 ** และอาเรยังสามารถทำให้ string กลายเป็น array ได้ ตามตัวอย่าง 
 let letter1 = [...'Hello world'] จะได้เป็น  letter1 = ["H", "e", "l", "l", "o", " ", "w", "o", "r", "l", "d"]



4. push / unshift / pop / shift / splice / slice / filter / forEach  
 push() → เติมท้าย array

 unshift() → เติมหน้าสุด

 pop() → ลบตัวท้าย

 shift() → ลบตัวแรก  [push / unshift / pop / shift เปลี่ยนค่า array เดิมจริงๆ]

 reduce(callback, initialValue) ใช้สำหรับลดค่าของอาร์เรย์ให้เหลือเพียงค่าเดียว [ไม่เปลี่ยนแปลงค่าใน Array เดิม ]

 splice(เริ่มตรงไหน, ลบกี่ตัว, เพิ่ม, เพิ่ม, ...) ใช้ได้หลายอย่าง ลบ เพิ่ม แทนที่ [จะตัดสมาชิกออกไปจริงๆ และเลื่อน index ของที่เหลือ]

 filter(condition) จะวนลูปทั้ง array แล้วสร้าง array ใหม่ที่เก็บเฉพาะค่าที่เงื่อนไขเป็น true [ไม่เปลี่ยน array เดิม]

 map((element, index, array) => { การดำเนินการกับ element}); ใช้สำหรับแปลงค่าของสมาชิกใน Array เดิมให้เป็นค่าชุดใหม่ โดยจะสร้าง Array ใหม่ขึ้นมา [โดยไม่เปลี่ยนแปลง Array เดิม]

 slice(start, end) คืน array ใหม่ที่ถูกตัดมาจาก array เดิม [ไม่เปลี่ยน array เดิม] 

 forEach(function(element, index, array) {การดำเนินการกับ element}) ใช้วนลูป array โดยเฉพาะ ไม่มีการ return array ใหม่  [ค่าเดิมไม่เปลี่ยน]
  -element: ค่าของสมาชิกแต่ละตัวใน Array
  -index: ตำแหน่งของสมาชิกใน Array (เริ่มจาก 0)
  -array: ตัว Array เดิมที่กำลังถูกวนลูป 
 fill(value, start, end) จะเขียนทับค่าเดิมใน array [กระทบ array เดิม ลำดับเดิมของอาเรย์จะสูญหายไปหลังจากการเรียงลำดับ]

 sort(condition ในกรณีที่ใช้กับตัวเลข) ใช้สำหรับ เรียงลำดับข้อมูลในอาเรย์  [เปลี่ยนแปลงค่าในอาเรย์ต้นฉบับ]
  วิธีกันโดยการคัดลอกไว้ก่อน const originalArray = [3, 1, 4, 1, 5];  
                        const sortedArray = [...originalArray].sort((a, b) => a - b);  



5. ฝึกทำโจทย์ 
 5.1) แปลงเป็นตัวพิมพ์ใหญ่
 ใช้ for loop ในการวน โดยเช็คเงื่อนไข i < pactice1.length (ยาวน้อยกว่า 4 = จริง) 
  1.อ่าน pactice1[i] → ได้ "item in index = i"
  2.เรียก "item นั้น".toUpperCase() → คืน "item นั้น แบบตัวใหญ่"
  3.เขียนทับกลับไปที่ pactice1[0] = "item แบบเป็นตัวใหญ่"
 เมื่อจบหนึ่งลูปค่า i จะเพิ่ม 1 จนกว่าจะมากกว่า 4 ถึงจะออกจากลูป

 5.2) ผลรวม / ค่าเฉลี่ย / มากกว่าเฉลี่ย
  5.2.1 getSum  ใช้ เมธอด reduce() วนทุก element แล้วบวกสะสมในตัวแปร sum
  5.2.2 getAVG ใข้ function getSum หาค่าเฉลี่ย ทำให้getAVG จะส่ง address ของ parameter ใน getAVG ไปให้ getSum ทำให้ชี้ address เดียวกัน ไปหาค่าเฉลี่ย  แล้วค่อยนำมาหาค่าเฉลี่ย
  5.2.3 getMOREAVG ส่ง parameter address ไปให้ function getAVG แล้วก็ส่งต่อไป getSum อีกที แล้ว วนเช็คแต่ละค่าของ array ว่ามากกว่าเฉลี่ยไหม ถ้ามากกว่าก็แสดงผล

 5.3) จัดการชื่อหนังสือ
  5.3.1 1.push ใส่ "Attack on Titan" เป็นสมาชิกใหม่ที่ท้าย อาเรย์ยาวเป็น 5 
        2.delete books[2] → เอาค่า "Naruto" ออก แต่ ไม่เลื่อน index → index 2 กลายเป็น ช่องว่าง (empty slot) ความยาวยัง 5
        3.sort() → เรียงเฉพาะสมาชิกที่ “มีค่า” ตามลำดับตัวอักษร แล้ว ช่องว่าง (empty) จะถูกโยกไปท้ายอาเรย์  

 5.4) หาสินค้าราคาต่ำกว่า 15000 / หาสินค้าที่แพงที่สุด / หาผลรวมราคาสินค้าทั้งหมด
  5.4.1 หาสินค้าราคาต่ำกว่า 15000
        1.filter จะเรียก callback ทีละสินค้า ส่ง Address ของออบเจ็กต์ให้พารามิเตอร์
        2.คืน true เมื่อ price < 15000 → เก็บเข้าอาเรย์ผลลัพธ์
  5.4.2 หาสินค้าที่แพงที่สุด
        1.กำหนดให้ object ตัวแรกเป็น max  {Laptop,30000}
        2.ใช้ filter เอา object ทุกตัวมาวนเทียบกับค่า max ถ้าค่า price มากกว่าจะกลายเป็น max แทน
  5.4.3 หาผลรวมราคาสินค้าทั้งหมด
        1.กำหนด pricesum ให้มีค่าเป็น price ของ index ที่ 0 ใน object
        2.สร้างลูปที่วนเอา price ของแต่ล่ะ index มาบวกกัน



6. Array Destructuring Assignment คือ การแตกค่าที่อยู่ใน Array ออกมาใส่ตัวแปรหลายๆ ตัวได้ง่ายๆ โดยใช้รูปแบบ []
   ไม่ต้องเขียนแบบดึงค่าออกมาทีละ index
    หลักง่ายๆคือ Destructuring จะจับคู่ ตัวแปรที่เรากำหนดกับindexนั้น และแทนค่าตำแหน่งนั้นใส่ตัวแปรนั้น 
     const [a, b] = [5, 10]
     console.log(a) // 5
     console.log(b) // 10
    เช่น ตำแหน่ง → a ได้ค่า 5 (ตำแหน่งแรก), b ได้ค่า 10 (ตำแหน่งสอง)

    
        
7. Iterating Arrays การวนลูปใน array
  1. ใช้ spread ได้ array ของ 'Hello World'
  2. ใช้ for of ในการวนลุปทีล่ะตัว
  3. นำตัวอักษรแต่ละตัวไปใส่ใน msg ที่เป็น string ว่าง และทุกครั้งที่ใส่จะใส่ ',' ตามทุกครั้ง ทำให้ได้เป็น "H, e, l, l, o, , w, ..."
  4. ใช้ join('') → รวม array กลับเป็น string "Hello world" 
  ****[method join() ไม่เปลี่ยนแปลงค่าเดิมของอาร์เรย์]****

**** เสริม ****
 //for...in
 ใช้สำหรับ: วนลูปผ่าน key (หรือ property names) ของ object หรือ index ของ array
 เหมาะกับ: การวนลูป object ที่ต้องการเข้าถึง property name หรือ key
 ตัวอย่าง
 const obj = { a: 1, b: 2, c: 3 };

 for (const key in obj) {
  console.log(key); // a, b, c
  console.log(obj[key]); // 1, 2, 3
 }
 //for...of
 ใช้สำหรับ: วนลูปผ่าน ค่า (values) ของ object ที่เป็น iterable เช่น array
 เหมาะกับ: การวนลูป array หรือ iterable object ที่ต้องการเข้าถึงค่าของแต่ละ element โดยตรง
 ตัวอย่าง
 const arr = [10, 20, 30];

 for (const value of arr) {
  console.log(value); // 10, 20, 30
 }

////  สรุปความแตกต่าง/////
คุณสมบัติ	 for...in	                        for...of
วนลูปอะไร?	key (property name หรือ index)	value (ค่าของ iterable object)
ใช้กับอะไร?	 Object, Array	                  Iterable (Array, String, Map, Set)
ดังนั้น for..of ok with array but for...in ok with object